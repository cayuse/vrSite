Random Commands you need from time to time:

// both of these have something to do with fixing 'cached bs' in laravel.. something that should be handled
// more eloquently imo


// artisan tinker thing
php artisan tinker

composer install --no-dev
to push to the site
git push production master

Entrust information
https://github.com/Zizaco/entrust#installation

$user->hasRole('owner');   // false
$user->hasRole('admin');   // true
$user->can('edit-user');   // false
$user->can('create-post'); // true

$user->hasRole(['owner', 'admin']);       // true
$user->can(['edit-user', 'create-post']); // true

// to clear and reset the database
php artisan migrate:reset
php artisan migrate
php artisan db:seed
composer dump-autoload
php artisan config:cache


 $users.first;
PHP error:  Use of undefined constant first - assumed 'first' on line 1

some random zoom information
https://oit.colorado.edu/tutorial/zoom-host-meeting-and-invite-participants

form builder
https://laravelcollective.com/docs/5.4/html

// font combinations
https://designshack.net/articles/typography/10-more-great-google-font-combinations-you-can-copy/


deploying a laravel app
https://devmarketer.io/learn/deploy-laravel-5-app-lemp-stack-ubuntu-nginx/
git remote add production ssh://root@vr.deepbondi.net/var/repo/site.git
1. Allow creation and storing of unique URLs that will be class ids.
2. When opening a url, generate, on the fly, .bat file that passes the class id to the unity program.
3. Turn bat into exe, automatically.
When the url was clicked, it will download a tiny exe program that will open the installed unity client in a proper room

David, next thing will be to allow choice of avatar on the dashboard. Have pictures of few avatars and ability to select one you wanna use


[11:42]
(I mean, user wanna use)


[11:42]
then, the id of the avatar will be also passed as a command line parameter


[11:43]
so when teacher or student logs in, the avatar of their choice will be selected from the list of available avatars.


[11:44]
if you want to have fun, use webGL to display the avatars, rotating, as 3D animations, instead of just having a picture of them. We can give you avatars we have as fbx files


[11:48]
The idea is that the user will fist install large unity app, and then call this app with parametrized mini-program to be always downloaded from the website. Later on, if we have time, we can develop proper web UI embeded in the unity client, but for now, I prefer to do it the zoom-way :wink:


[11:48]
Theo, is everything clear?


kpietroszek [11:07 AM]
ok, so here is the summary of the next tasks:
1. Add "start" button to start presenting. It's better than showing weird url
2. Let user choose avatar: display avatar fbx using webGL. The easiest way to do that is to create mini app in Unity, compile it to webGL and embed in the page. But you can also program it directly in javascript/webGL (that would be your javascript assignment ;-)).
3. Try to compile the project for webVR and see how (badly) it works


[11:07]
4. Find out how to pass command line-like arguments to webVR apps. We still need to pass the room id